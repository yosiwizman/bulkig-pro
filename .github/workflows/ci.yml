name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run linter
        run: pnpm lint || echo "Linting not configured yet"
        
      - name: Run type check
        run: pnpm type-check || echo "Type checking not configured yet"
        
      - name: Run tests
        run: pnpm test || echo "Tests not configured yet"
        
      - name: Build project
        run: pnpm build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '20'
        with:
          name: build-artifacts
          path: |
            apps/*/dist/
            apps/*/build/
          retention-days: 1

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run security audit (fail on high+ only)
        run: pnpm audit --audit-level high
        
      - name: Determine TruffleHog range
        id: range
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "base=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
            echo "head=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          else
            echo "base=${{ github.event.before }}" >> $GITHUB_OUTPUT
            echo "head=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Decide whether to run TruffleHog
        id: skip_trufflehog
        shell: bash
        run: |
          if [[ -z "${{ steps.range.outputs.base }}" || "${{ steps.range.outputs.base }}" == "${{ steps.range.outputs.head }}" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "BASE and HEAD are the same (or empty); skipping TruffleHog."
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for secrets
        if: steps.skip_trufflehog.outputs.skip != 'true'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ steps.range.outputs.base }}
          head: ${{ steps.range.outputs.head }}
          extra_args: --debug --only-verified

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Check code formatting
        run: pnpm format:check || echo "Formatting not configured yet"
        
      - name: Run complexity analysis
        run: |
          npx madge --circular --extensions ts,js apps/ || echo "Circular dependencies detected (non-blocking)"
          echo "Circular dependency check completed"
